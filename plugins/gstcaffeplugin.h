/**
MIT License

Copyright (c) 2018 NVIDIA CORPORATION. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*
*/

#ifndef __GST_CAFFELUGIN_H__
#define __GST_CAFFELUGIN_H__

#include <gst/base/gstbasetransform.h>
#include <gst/video/video.h>

/* Open CV headers */
#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

#include "caffeplugin_lib.h"
#include <cuda.h>
#include <cuda_runtime.h>

/* Package and library details required for plugin_init */
#define PACKAGE "caffetrt"
#define VERSION "1.0"
#define LICENSE "LGPL"
#define DESCRIPTION "Plugin using TensorRT with Caffe Models"
#define BINARY_PACKAGE "Plugin using TensorRT with Caffe Models"
#define URL "https://github.com/jayveeangeles/deepstream-plugins/tree/caffe"

G_BEGIN_DECLS
/* Standard boilerplate stuff */
typedef struct _GstCaffePlugin GstCaffePlugin;
typedef struct _GstCaffePluginClass GstCaffePluginClass;

/* Standard boilerplate stuff */
#define GST_TYPE_CAFFEPLUGIN (gst_caffeplugin_get_type())
#define GST_CAFFEPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_CAFFEPLUGIN, GstCaffePlugin))
#define GST_CAFFEPLUGIN_CLASS(klass)                                                                \
    (G_TYPE_CHECK_CLASS_CAST((klass), GST_TYPE_CAFFEPLUGIN, GstCaffePluginClass))
#define GST_CAFFEPLUGIN_GET_CLASS(obj)                                                              \
    (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_CAFFEPLUGIN, GstCaffePluginClass))
#define GST_IS_CAFFEPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_CAFFEPLUGIN))
#define GST_IS_CAFFEPLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), GST_TYPE_CAFFEPLUGIN))
#define GST_CAFFEPLUGIN_CAST(obj) ((GstCaffePlugin*) (obj))

struct _GstCaffePlugin
{
  GstBaseTransform base_trans;

  // Context of the custom algorithm library
  CaffePluginCtx *caffepluginlib_ctx;

  // Unique ID of the element. The labels generated by the element will be
  // updated at index `unique_id` of attr_info array in NvDsObjectParams.
  guint unique_id;

  // Frame number of the current input buffer
  guint64 frame_num;

  // Input video info (resolution, color format, framerate, etc)
  GstVideoInfo video_info;

  //plugin network type
  gchar *network;

  //model path
  gchar *model_path;

  //weights file
  gchar *weights_file;

  gfloat nms;
  gfloat confidence;

  guint skip_interval;
  guint infer_loop_limit;
  guint preprocess_deadline;

  gboolean draw_results;

  trt::Stopwatch<std::chrono::microseconds, std::chrono::steady_clock> infer_timer;
  double infer_time = 0.0;
};

// Boiler plate stuff
struct _GstCaffePluginClass
{
  GstBaseTransformClass parent_class;
};

GType gst_caffeplugin_get_type (void);

G_END_DECLS
#endif /* __GST_CAFFELUGIN_H__ */
